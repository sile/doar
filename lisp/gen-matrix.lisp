;; parse mecab matrix.def
(defun gen-matrix (file)
  (with-open-file (in file)
    (let* ((left-size (read in))
	   (right-size (read in))
	   (matrix (make-array (list left-size right-size)
			       :element-type 'fixnum)))
      (dotimes (lft left-size)
	(format t " # ~A~%" lft)
	(dotimes (rgt right-size)
	  (let ((before-id (read in))
		(after-id (read in))
		(cost (read in)))
	    (setf (aref matrix lft rgt) cost))))
      matrix)))

(defun save-matrix (matrix file)
  (with-open-file (out file :direction :output
		            :element-type '(unsigned-byte 16)
		            :if-exists :supersede)
    (destructuring-bind (lft-size rgt-size) (array-dimensions matrix)
      (dotimes (lft lft-size)
	(dotimes (rgt rgt-size)
	  (write-byte (ldb (byte 16 0) (aref matrix lft rgt)) out)))))
  'done)

(defun load-matrix (file)
  (with-open-file (in file :element-type '(signed-byte 16))
    (let* ((fsize (file-length in))
	   ;; 今は簡単のために、matrixはsquareだと仮定
	   (num (truncate (sqrt fsize)))
	   (matrix (make-array (list num num) 
			       :element-type 'fixnum)))
      (dotimes (lft num)
	;;(format t " # ~A~%" lft)
	(dotimes (rgt num)
	  (setf (aref matrix lft rgt) (read-byte in))))
      matrix)))
    

